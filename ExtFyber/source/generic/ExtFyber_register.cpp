/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "ExtFyber_autodefs.h"
#include "s3eEdk.h"
#include "ExtFyber.h"
//Declarations of Init and Term functions
extern s3eResult ExtFyberInit();
extern void ExtFyberTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_TVOS ||defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void fyber_marmalade_setup_wrap(const char* appId, const char* securityToken, const char* userId, const char* bucketId, const char* conditionGroupId, ExtFyberStatusCallbackFn fn)
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber func on main thread: fyber_marmalade_setup"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)fyber_marmalade_setup, 6, appId, securityToken, userId, bucketId, conditionGroupId, fn);
}
static void requestOffers_wrap()
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber func on main thread: requestOffers"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)requestOffers, 0);
}
static bool showAd_wrap()
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber func on main thread: showAd"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)showAd, 0);
}
#define fyber_marmalade_setup fyber_marmalade_setup_wrap

#define requestOffers requestOffers_wrap

#define showAd showAd_wrap


#endif

s3eResult ExtFyberRegister(ExtFyberCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_EXTFYBER_HASH, EXTFYBER_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult ExtFyberUnRegister(ExtFyberCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_EXTFYBER_HASH, EXTFYBER_CALLBACK_MAX, cbid, fn);
}

void ExtFyberRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[7];
    funcPtrs[0] = (void*)ExtFyberRegister;
    funcPtrs[1] = (void*)ExtFyberUnRegister;
    funcPtrs[2] = (void*)fyber_marmalade_setup;
    funcPtrs[3] = (void*)requestOffers;
    funcPtrs[4] = (void*)showAd;
    funcPtrs[5] = (void*)fyber_cache_pause_download;
    funcPtrs[6] = (void*)fyber_cache_resume_download;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[7] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("ExtFyber", funcPtrs, sizeof(funcPtrs), flags, ExtFyberInit, ExtFyberTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int ExtFyberStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&ExtFyberRegisterExt;
    return 0;
}

int g_ExtFyberVal = ExtFyberStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    ExtFyberRegisterExt();
}
#endif

#endif
