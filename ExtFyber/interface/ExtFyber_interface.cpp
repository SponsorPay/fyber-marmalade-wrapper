/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "ExtFyber.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*ExtFyberRegister_t)(ExtFyberCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*ExtFyberUnRegister_t)(ExtFyberCallback cbid, s3eCallback fn);
typedef       void(*fyber_marmalade_setup_t)(const char* appId, const char* securityToken, const char* userId, const char* bucketId, const char* conditionGroupId, ExtFyberStatusCallbackFn fn);
typedef       void(*requestOffers_t)();
typedef        int(*showAd_t)();
typedef       void(*fyber_cache_pause_download_t)();
typedef       void(*fyber_cache_resume_download_t)();

/**
 * struct that gets filled in by ExtFyberRegister
 */
typedef struct ExtFyberFuncs
{
    ExtFyberRegister_t m_ExtFyberRegister;
    ExtFyberUnRegister_t m_ExtFyberUnRegister;
    fyber_marmalade_setup_t m_fyber_marmalade_setup;
    requestOffers_t m_requestOffers;
    showAd_t m_showAd;
    fyber_cache_pause_download_t m_fyber_cache_pause_download;
    fyber_cache_resume_download_t m_fyber_cache_resume_download;
} ExtFyberFuncs;

static ExtFyberFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xdd08f5ce, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: ExtFyber");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xdd08f5ce, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool ExtFyberAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult ExtFyberRegister(ExtFyberCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber[0] func: ExtFyberRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_ExtFyberRegister(cbid, fn, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult ExtFyberUnRegister(ExtFyberCallback cbid, s3eCallback fn)
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber[1] func: ExtFyberUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_ExtFyberUnRegister(cbid, fn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void fyber_marmalade_setup(const char* appId, const char* securityToken, const char* userId, const char* bucketId, const char* conditionGroupId, ExtFyberStatusCallbackFn fn)
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber[2] func: fyber_marmalade_setup"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_fyber_marmalade_setup(appId, securityToken, userId, bucketId, conditionGroupId, fn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void requestOffers()
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber[3] func: requestOffers"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_requestOffers();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

int showAd()
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber[4] func: showAd"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_showAd();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void fyber_cache_pause_download()
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber[5] func: fyber_cache_pause_download"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_fyber_cache_pause_download();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void fyber_cache_resume_download()
{
    IwTrace(EXTFYBER_VERBOSE, ("calling ExtFyber[6] func: fyber_cache_resume_download"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_fyber_cache_resume_download();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
