/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_EXTFYBER_H
#define S3E_EXT_EXTFYBER_H

#include <s3eTypes.h>

typedef enum 
{
    EXTFYBER_NOTIFY_STATUS_CHANGE,

    EXTFYBER_CALLBACK_MAX
} ExtFyberCallback;

typedef enum
{
	EXT_FYBER_STARTED,
	EXT_FYBER_CLOSE_FINISHED,
	EXT_FYBER_CLOSE_ABORTED,
	EXT_FYBER_ERROR,
	EXT_FYBER_AD_AVAILABLE = 101,
	EXT_FYBER_AD_NOT_AVAILABLE = 102,
	EXT_FYBER_AD_REQUEST_ERROR = 103
} ExtFyberStatus;

typedef void (*ExtFyberStatusCallbackFn)(ExtFyberStatus status);
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the ExtFyber extension is available.
 */
s3eBool ExtFyberAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref ExtFyberCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 *  - @ref S3E_RESULT_SUCCESS if no error occurred.
 *  - @ref S3E_RESULT_ERROR if the operation failed.\n
 *
 * @see ExtFyberUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref ExtFyberCallback enum.
 */
s3eResult ExtFyberRegister(ExtFyberCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback to unregister.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the ExtFyberCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see ExtFyberRegister
 */
s3eResult ExtFyberUnRegister(ExtFyberCallback cbid, s3eCallback fn);

void fyber_marmalade_setup(const char* appId, const char* securityToken, const char* userId, const char* bucketId, const char* conditionGroupId, ExtFyberStatusCallbackFn fn);

void requestOffers();

int showAd();

void fyber_cache_pause_download();

void fyber_cache_resume_download();

// \cond HIDDEN_DEFINES
S3E_END_C_DECL
// \endcond

#endif /* !S3E_EXT_EXTFYBER_H */
